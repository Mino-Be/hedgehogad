{"version":3,"sources":["assets/images/systemOverview2.jpg","assets/images/fallingLeaves.jpg","scripts/main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Main","className","href","target","rel","src","jpg_systemOverview","alt","jpg_fallingLeaves","process","width","height","frameBorder","allow","allowFullScreen","App","date","Date","toLocaleDateString","year","month","day","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,uNC6E5BC,EAvEF,WACT,OACI,6BACI,8BACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,uBAAsB,gFACrC,wBAAIA,UAAU,iBAAd,kDACmD,0BAAMA,UAAU,YAAhB,oBADnD,iBAGA,yBAAKA,UAAU,kBACX,+CACA,2BAAG,uBAAGC,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBAAzD,uBACH,iDACA,2BAAG,uBAAGF,KAAK,4CAA4CC,OAAO,SAASC,IAAI,uBAAxE,oBAEP,yBAAKH,UAAU,uBAAf,2BAEA,yBAAKA,UAAU,kBACX,yBAAKI,IAAKC,IAAoBC,IAAI,oBAAwB,yBAAKF,IAAKG,IAAmBD,IAAI,qBAInG,6BAEA,yBAAKN,UAAU,YACX,wCACA,2BACI,uBAAGC,KAAK,6CAA6CC,OAAO,SAASC,IAAI,uBAAzE,+BADJ,8TAKA,orBAKJ,6BAEA,yBAAKH,UAAU,SACX,qCACA,4BACI,sCAAW,uBAAGC,KAAMO,6BAA4CN,OAAO,SAASC,IAAI,uBAAzE,gBAAX,cACA,8EACA,mDACA,wCAIR,6BACA,yBAAKH,UAAU,qBACX,kDACA,yBAAKA,UAAU,YACX,4BAAQS,MAAM,MAAMC,OAAO,MAAMN,IAAI,4CAA4CO,YAAY,IAAIC,MAAM,2FAA2FC,iBAAe,GAAjN,mCAIR,6BAEA,yBAAKb,UAAU,mBACX,+CACA,qDAA0B,uBAAGC,KAAK,yCAAyCC,OAAO,SAASC,IAAI,uBAArE,oBAA1B,sGC9CLW,MAff,WACI,IAAIC,EAAO,IAAIC,KAGf,OACI,yBAAKhB,UAAU,OACX,8BACI,iCACA,kBAAC,EAAD,MACA,iDAAuBe,EAAKE,mBAAmB,QAP7C,CAAEC,KAAM,UAAWC,MAAO,QAASC,IAAK,YAO1C,QCFIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c0f68004.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/systemOverview2.ef40d0d9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fallingLeaves.05609ca9.jpg\";","import React from 'react'\n\nimport '../css/main.scss'\nimport jpg_systemOverview from '../assets/images/systemOverview2.jpg'\nimport jpg_fallingLeaves from '../assets/images/fallingLeaves.jpg'\n\nconst Main = () => {\n    return (\n        <div>\n            <main>\n                <div className='Heading'>\n                    <div className=\"Heading-submissions\"><strong>SIGGRAPH Asia 2020 Technical Communications</strong></div>\n                    <h1 className=\"Heading-title\">\n                        HedgehogAD : Interactive Design Exploration of <span className=\"Nonbreak\">Omni-Directional</span> Aerodynamics\n                    </h1>\n                    <div className='Heading-author'>\n                        <p>Tomoya Kumazaki </p>\n                        <p><a href=\"https://n-taka.info/intro/\" target=\"_blank\" rel=\"noreferrer noopener\">Kazutaka Nakashima</a></p>\n                        <p> Tsukasa Fukusato </p>\n                        <p><a href=\"https://www-ui.is.s.u-tokyo.ac.jp/~takeo/\" target=\"_blank\" rel=\"noreferrer noopener\">Takeo Igarashi</a></p>\n                    </div>\n                    <div className=\"Heading-affiliation\">The University of Tokyo</div>\n\n                    <div className=\"Heading-images\">\n                        <img src={jpg_systemOverview} alt=\"Dystem overview\"></img><img src={jpg_fallingLeaves} alt=\"Falling leaves\"></img>\n                    </div>\n                </div >\n\n                <hr></hr>\n\n                <div className='Abstract'>\n                    <h2>Abstract</h2>\n                    <p>\n                        <a href=\"https://dl.acm.org/doi/pdf/10.1145/2766919\" target=\"_blank\" rel=\"noreferrer noopener\">\n                            OmniAD [Martin et al. 2015]\n                        </a> is a data-driven pipeline for physics-based aerodynamics animations. In the pipeline, a real-time aerodynamic model which handles omni-directional airflow has alsobeen introduced. However, their framework requires a capturedmotion, which implies that their model is not suitable for designing a customized motion.\n                    </p>\n                    <p>\n                        In this paper, we present a method to add user-controllability to the aerodynamic model in OmniAD by allowing the user to directly interact with the aerodynamics model. The system first visualizes the force and torque coefficients, which represent (x,y,z) components of aerodynamic force (i.e., drag andlift force) and torque, as a set of arrows on a sphere. The user then modifies the arrows on the screen as desired. The system updates the internal representation (parameters for spherical harmonics) and shows resulting animation. We run a user study and the participants successfully designed physically plausible falling motions using the proposed method.\n                    </p>\n                </div>\n\n                <hr></hr>\n\n                <div className='Links'>\n                    <h2>Links</h2>\n                    <ul>\n                        <li>Paper [<a href={process.env.PUBLIC_URL + '/HedgehogAD.pdf'} target=\"_blank\" rel=\"noreferrer noopener\"> PDF (1.5MB)</a> / ACM DL]</li>\n                        <li>Source code [for Windows / for MacOS / README]</li>\n                        <li>Presentation [pptx]</li>\n                        <li>BibTex</li>\n                    </ul>\n                </div>\n\n                <hr></hr>\n                <div className='SupplementalVideo'>\n                    <h2>Supplemental Video</h2>\n                    <div className=\"SupVideo\">\n                        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Ky8Hwd5MOFw\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen>HedgehogAD Supplemental Video</iframe>\n                    </div>\n                </div>\n\n                <hr></hr>\n\n                <div className='Acknowledgement'>\n                    <h2>Acknowledgement</h2>\n                    <p>We would like to thank <a href=\"https://cgenglab.github.io/labpage/en/\" target=\"_blank\" rel=\"noreferrer noopener\">\n                        Nobuyuki Umetani\n                        </a> for many insightful discussions.\n                        This work was supported by JST CREST under grant JPMJCR17A1.\n                    </p>\n                </div>\n            </main>\n        </div >\n    )\n}\n\nexport default Main","import React from 'react';\n\nimport './css/app.scss'\nimport Main from './scripts/main';\n\nfunction App() {\n    var date = new Date();\n    var options = { year: 'numeric', month: 'short', day: 'numeric' };\n\n    return (\n        <div className=\"App\">\n            <body>\n                <header></header>\n                <Main />\n                <footer>Last update : {date.toLocaleDateString('en-US', options)} </footer>\n            </body>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}